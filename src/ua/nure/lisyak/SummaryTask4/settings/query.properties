############ Course
course.save                  = INSERT INTO course (tutor_id, title, description, image, start_date, end_date, status) VALUES (?, ?, ?, ?, ?, ?, ?)
course.update                = UPDATE course SET tutor_id = ?, title = ?, description = ?, image = ?, start_date = ?, end_date = ?, status = ? WHERE id = ?
course.delete                = DELETE FROM course WHERE id = ?
course.get                   = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id WHERE course.id = ?
course.getAll.sorted         = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id  ORDER BY course.id DESC LIMIT ?, ?
course.getAll                = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id
course.by.tutor              = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id WHERE tutor_id = ?
course.all.finished          = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id WHERE end_date <= NOW()
course.set.finished          = UPDATE course SET status = 'finished' WHERE end_date <= NOW()
course.get.by.student.id     = SELECT id, tutor_id, title, description, image, start_date, end_date, status, count(id) AS count FROM course WHERE id IN (SELECT course_id FROM student_courses WHERE user_id = ?) GROUP BY id, tutor_id, title, description, image, start_date, end_date, status
course.get.except.subscribed = SELECT * FROM course WHERE id NOT IN (SELECT course_id FROM student_courses WHERE user_id = ?)
subscribers.get.count        = SELECT count(id) FROM user_courses WHERE course_id = ?

course.get.themes.by.id            = SELECT * FROM course_themes WHERE course_id = ?
course.theme.delete                = DELETE FROM course_themes WHERE course_id = ? AND theme = ?
course.theme.delete.old            = DELETE * FROM course_themes WHERE course_id = ?
course.theme.add                   = INSERT INTO course_themes(course_id, theme) VALUES (?, ?)
course.theme.save                  = INSERT INTO course_themes (user_id, role) VALUES (?, ?)
course.get.with.count              = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) as count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id INNER JOIN (SELECT enabled, user.id as tutor_user_id FROM user) AS user ON tutor_user_id = course.tutor_id WHERE enabled <> 'BANNED' ORDER BY {s} {o} LIMIT ?, ?
course.get.filtered                = SELECT DISTINCT * FROM course \
                                      LEFT JOIN (SELECT course_id AS sc_course_id, count(id)  AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.sc_course_id \
                                      LEFT JOIN course_themes ON course_themes.course_id = course.id \
                                      INNER JOIN (SELECT id as user_tutor_id, name AS tutor, enabled AS tutor_status FROM user) AS tutor_data ON tutor_id = tutor_data.user_tutor_id \
                                      WHERE {c} LIKE '%{w}%' AND tutor_status <> 'BANNED' GROUP BY id ORDER BY {s} {o} LIMIT ?, ?
course.get.by.title.and.tutor      = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id  WHERE title = ? AND tutor_id = ?
course.get.by.title                = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id  WHERE title = ?
course.count                       = SELECT count(count_table.id) as countCol FROM ({tc}) AS count_table
courses.get.by.status.and.tutor.id = SELECT * FROM course LEFT JOIN (SELECT course_id, count(id) AS count FROM student_courses GROUP BY course_id)  AS user_count ON course.id = user_count.course_id WHERE status = ? AND tutor_id = ?
student.average.mark               = SELECT avg(mark) AS mark FROM student_courses WHERE id = ?


############ Journal entry
journal.save                     = INSERT INTO student_courses (user_id, course_id, mark) VALUES (?, ?, ?)
journal.update                   = UPDATE student_courses SET user_id = ?, course_id = ?, mark = ? WHERE id = ?
journal.delete                   = DELETE FROM student_courses WHERE id = ?
journal.get                      = SELECT * FROM journalview WHERE id = ?
journal.by.tutor                 = SELECT * FROM journalview INNER JOIN course ON course_id = course.id WHERE course.tutor_id = ?
journal.by.course                = SELECT * FROM journalview WHERE course_id = ?
journal.get.by.student           = SELECT * FROM journalview WHERE course_id = ?
journal.delete.by.student        = DELETE FROM student_courses WHERE user_id = ? AND id = ?
journal.get.by.tutor             = SELECT * FROM journalview WHERE journalview.course_id IN (SELECT id FROM course WHERE tutor_id = ?) AND journalview.id = ?
journal.get.by.tutor.and.status  = SELECT * FROM `e_course`.journalview WHERE course_id IN (SELECT id FROM course WHERE tutor_id = ?) AND status = ?;

############# Message
message.save           = INSERT INTO message (from_id, to_id, message, is_read, date) VALUES (?, ?, ?)
message.update         = UPDATE message SET from_id = ?, to_id = ?, message = ?, is_read = ?, date = ? WHERE id = ?
message.delete         = DELETE FROM message WHERE id = ?
message.get            = SELECT * FROM message INNER_JOIN user ON message.from_id = user.id WHERE id = ?
message.unread.count   = SELECT COUNT(id) AS message_count from message WHERE NOT is_read AND to_id = ?
message.dialog         = SELECT * FROM message INNER_JOIN user ON message.from_id = user.id WHERE from_id = ? AND to_id = ?
message.unread.from.to = SELECT * FROM message INNER_JOIN user ON message.from_id = user.id WHERE from_id = ? AND to_id = ? AND NOT is_read
message.unread         = SELECT * FROM message INNER_JOIN user ON message.from_id = user.id WHERE to_id = ?

############# User
user.save            = INSERT INTO user (name, login, password, email, enabled, image) VALUES (?, ?, ?, ?, ?, ?)
user.update          = UPDATE user SET name = ?, login = ?, password = ?, email = ?, enabled = ?, image = ? WHERE id = ?
user.delete          = DELETE FROM user WHERE id = ?
user.get.by.id       = SELECT * FROM user WHERE id = ?
user.get.by.email    = SELECT * FROM user WHERE email = ?
user.get.roles.by.id = SELECT * FROM user_roles WHERE user_id = ?
user.getAll.by.role  = SELECT * FROM user INNER JOIN user_roles ON user_id = user.id WHERE role = ? AND enabled <> 'BANNED'
user.all             = SELECT * FROM user
user.role.delete     = DELETE FROM user_roles WHERE user_id = ? AND role = ?
user.role.delete.old = DELETE FROM user_roles WHERE user_id = ?
user.role.add        = INSERT INTO user_roles(user_id, role) VALUES (?, ?)
user.get.by.login    = SELECT * FROM user WHERE login = ?
user.by.status       = SELECT * FROM user LEFT JOIN user_roles on user_id = user.id WHERE enabled = ? AND role <> 'TUTOR' GROUP BY id
